{"version":3,"sources":["util.js","components/files.js","components/file.js","components/uploadform.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","prettySize","size","toFixed","File","_ref","file","react_default","a","createElement","className","href","_id","filename","Files","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","files","loading","_this2","fetch","process","then","res","status","setState","json","data","catch","console","log","length","map","files_File","key","Component","util","require","match","params","id","Date","upload_time","toGMTString","target","rel","UploadForm","input_file","handleSubmit","bind","assertThisInitialized","handleFileChange","e","preventDefault","document","getElementById","undefined","formData","FormData","append","method","body","window","location","onSubmit","type","multiple","onChange","name","value","config","Header","src","alt","react_router_dom","to","App","App_Header","react_router","path","exact","component","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abab117b.chunk.js","sourcesContent":["module.exports = {\n  prettySize: (size) => {\n    let numDigits = 2;\n    if(size >= 1024*1024*1024) return (size/(1024*1024*1024)).toFixed(numDigits) + \" GB\";\n    else if(size >= 1024*1024) return (size/(1024*1024)).toFixed(numDigits) + \" MB\";  \n    else if(size >= 1024) return (size/1024).toFixed(numDigits) + \" KB\";\n    else return size + \" bytes\";  \n  }\n};","import React, { Component } from 'react';\n\nconst File = ({file}) => {\n  return (\n    <div className=\"file\">\n      <span className=\"title\">\n        <a href={\"files/\" + file._id}>{file.filename}</a>\n      </span>\n    </div>\n  );\n};\n\nclass Files extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n      files: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_API_URL + \"/files\")\n    .then((res) => {\n      if(res.status !== 200) {\n        this.setState({error: \"Unauthorized!\"})\n      }\n      return res.json()\n    })\n    .then((data) => {\n      this.setState({files: data, loading: false})\n    })\n    .catch(console.log);\n  }\n\n\n  render() {\n    const files = this.state.files;\n\n    if(this.state.loading) return (<h3>Loading...</h3>);\n    else if(files.length === 0) return (<h3>No Files.</h3>)\n    else return (\n      <div className=\"files\">\n        <h2>{files.length} Files</h2>\n        {files.map((file) => (\n          <File key={file._id} file={file} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Files","import React, { Component } from 'react'\nconst util = require(\"../util\");\n\nclass File extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: {},\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    fetch(process.env.REACT_APP_API_URL + \"/files/\" + this.props.match.params.id)\n    .then(res => res.json())\n    .then(res => {\n      this.setState({file: res, loading: false});\n    })\n  }\n\n  render() {\n    if(this.state.loading) {\n      return (<h1>Loading...</h1>);\n    } else {\n      const file = this.state.file;\n      return (\n        <div>\n          <h2>{file.filename}</h2>\n          <p><b>Size:</b> {util.prettySize(file.size)}</p>\n          <p><b>Uploaded:</b> {new Date(file.upload_time).toGMTString()}</p>\n          <a\n            href={process.env.REACT_APP_API_URL + \"/files/\" + file._id + \"?dl=1\"}\n            target=\"_blank\" rel=\"noopener noreferrer\"\n            className=\"button button-large\">\n          Download\n          </a>\n        </div>\n      );\n    }\n  }\n}\n\nexport default File","import React, { Component } from 'react';\n\nclass UploadForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input_file: null\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFileChange = this.handleFileChange.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    \n    const file = document.getElementById(\"file_input\").files[0];\n\n    if(file === undefined) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    fetch(process.env.REACT_APP_API_URL + \"/files/new\", {\n      method: \"POST\",\n      body: formData\n    })\n    .then(res => res.json())\n    .then(res => {\n      if(res.file) window.location.href = \"/files/\" + res.file;\n    });\n  }\n\n  handleFileChange(e) {\n    const file = e.target.files[0];\n    if(file) {\n      this.setState({input_file: e.target.files[0]});\n    }\n  }\n\n  render() {\n    const input_file = this.state.input_file;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"uploadform\">\n          <h1 className=\"text-center\">Upload a file</h1>\n          <p className=\"text-center\">Drag and drop a file or click to select a file.</p>\n\n          <div>\n            <input type=\"file\" id=\"file_input\" multiple onChange={this.handleFileChange} />\n          </div>\n          \n          {input_file && (\n            <p className=\"top-buffer-lg text-center\"><b>File:</b> {input_file.name}</p>\n          )}\n        </div>\n\n        {input_file && (\n          <div className=\"top-buffer\">\n            <input type=\"submit\" value=\"Upload\" className=\"button\" />\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default UploadForm;","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Files from './components/files';\nimport File from './components/file';\nimport UploadForm from './components/uploadform';\n\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <div className=\"container\">\n        <Route path=\"/\" exact component={UploadForm} />\n        <Route path=\"/files\" exact component={Files} />\n        <Route path=\"/files/:id\" component={File} />\n      </div>\n    </Router>\n  )\n}\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"content\">\n        <img src=\"/logo.png\" alt=\"\" />\n        <div className=\"title\">File Sharing App</div>\n        <div className=\"links\">\n          <Link to=\"/\">Upload</Link>\n          <Link to=\"/files\">Files</Link>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}